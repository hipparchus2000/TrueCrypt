
rem
rem Copyright (c) 2004, Jeff Davies (editor@aliensarehere.com) 
rem  
rem You may distribute under the terms of the GNU General Public License as
rem specified in the licence file that comes with the TRUSTKEY source 
rem distribution.
rem 
rem 

open "key.txt" for reading as 1
input #1 dict_max
input #1 msg_max
input #1 block_size
close 1

dim dictionary$(dict_max)
dim dictionary_index(dict_max)
dim dictionary_flag(dict_max)
dim message(msg_max)

rem debug level
dbg=0

rem verbose
d_vb=1

if (dbg=d_vb) print "encryptor starting"

rem set uo to 1 to use offsets
uo=1

if (dbg=d_vb) print "reading dictionary index"
open "dictionary_index.txt" for reading as 1
count=0
while (not (eof(1)) and (count < (dict_max-1)))
    input#1 dictionary_index(count)
    count=count+1
wend
close 1

if (dbg=d_vb) print "reading dictionary.txt"
open "dictionary.txt" for reading as 1
count=0
while (not (eof (1)) and (count <(dict_max-1))) 
    input #1 dictionary$(count)
    count=count+1
wend
close 1
if (dbg=d_vb) print "read ",count,"records from dictionary"


dim random_block(block_size)
dim message_positions(msg_max)
dim message_offsets(msg_max)

if (dbg=d_vb) print "reading offsets"
open "message_offsets.txt" for reading as 1
for i=0 to (msg_max-1)
    input#1 message_offsets(i)
next i
close 1

if (dbg=d_vb) print "reading positions file"
open "message_positions.txt" for reading as 1
for i=0 to (msg_max-1)
	input #1 message_positions(i)
next i
close 1



rem debug code
dbg=0
dbg1=0

rem set dbg to d_di to debug dictionary index generation
d_di=1
d_vb=2


rem set to 1 to use offsets
uo=1

if (dbg1=d_vb) print "reading message"
count=0
open "message.txt" for reading as 1
while (not (eof(1)) and (count<(msg_max)))
	input #1 word$
	find=0
	found=-1
 	repeat	
		if (word$=dictionary$(dictionary_index(find))) then 
			found=0
		end if
 		find=find+1
	until ((found=0) or (find>(dict_max-1)))
	if (found=-1) then 
		print "word "+word$+" not found in dictionary, retry"
		exit
	else
		message(count)=find-1
	end if
	count=count+1
wend 
length_of_message=count
close #1

if (dbg1=d_vb) then
	open "message_check.txt" for writing as 1
	for i=0 to (msg_max-1)
		print #1 dictionary$(dictionary_index(message(i)))
	next i
	close 1
end if

if (dbg1=d_vb) print "message read and encoded using dictionary"
REM *** so we have loaded message and converted to integers (through randomised
REM  dictionary index). dictionary index and dictionary are on disk.
REM LATER add trim, rtrim, lcase.

if (dbg1=d_vb) print "making random block"
rem fill random block
for i=0 to (block_size-1)
	rem this is twice the dict size since the maximum number
	rem from the dict-index is dict_max, and the max offset
	rem is dict_max. Therefore to make the size of noise the
	rem same size as the output from the encrypting process,
	rem the maximum size must be double that of the above.
     random_block(i)=int(ran(1)*(dict_max*2))
next i

rem feed augmented array of message into random block
for i=0 to length_of_message
   random_block(message_positions(i))=message(i)+(uo*message_offsets(i))
next i

rem save block to disk
open "random.txt" for writing as 1
for i=0 to (block_size-1)
	print#1, random_block(i)
next i
close 1



