
rem
rem Copyright (c) 2004, Jeff Davies (editor@aliensarehere.com) 
rem  
rem You may distribute under the terms of the GNU General Public License as
rem specified in the licence file that comes with the TRUSTKEY source 
rem distribution.
rem 
rem 

open "key.txt" for reading as 1
input #1 dict_max
input #1 msg_max
input #1 block_size
close 1

dim dictionary$(dict_max)
dim dictionary_index(dict_max)
dim dictionary_flag(dict_max)
dim message(msg_max)

rem debug level
dbg=0

rem verbose
d_vb=1

if (dbg=d_vb) print "decryptor starting"

rem set uo to 1 to use offsets
uo=1

if (dbg=d_vb) print "reading dictionary index"
open "dictionary_index.txt" for reading as 1
count=0
while (not (eof(1)) and (count < (dict_max-1)))
    input#1 dictionary_index(count)
    count=count+1
wend
close 1

if (dbg=d_vb) print "reading dictionary.txt"
open "dictionary.txt" for reading as 1
count=0
while (not (eof (1)) and (count <(dict_max-1))) 
    input #1 dictionary$(count)
    count=count+1
wend
close 1
if (dbg=d_vb) print "read ",count,"records from dictionary"


dim random_block(block_size)
dim message_positions(msg_max)
dim message_offsets(msg_max)

if (dbg=d_vb) print "reading offsets"
open "message_offsets.txt" for reading as 1
for i=0 to (msg_max-1)
    input#1 message_offsets(i)
next i
close 1

if (dbg=d_vb) print "reading positions file"
open "message_positions.txt" for reading as 1
for i=0 to (msg_max-1)
	input #1 message_positions(i)
next i
close 1

if (dbg=d_vb)print "reading random block from disk"
open "random.txt" for reading as 1
for i=0 to (block_size-1)
	input#1 random_block(i)
next i
close 1

if (dbg=d_vb) print "all key data and message read"
if (dbg=d_vb) print "decoding"
for i=0 to (msg_max-1)
  if (dbg=d_vb) print "rblock@msgpos",message_positions(i),"oset", message_offsets(i),"=",random_block(message_positions(i))
  message(i)=random_block(message_positions(i))-(uo*message_offsets(i))
next i

if (dbg=d_vb) then
	print "writing message-numeric-out.txt"
	open "message-numeric-out.txt" for writing as 1
	for i=0 to (msg_max-1)
	  print #1, message(i)
	next i
	close 1
end if 

if (dbg=d_vb) print "outputting message to message-out.txt"
open "message-out.txt" for writing as 1
for i=0 to (msg_max-1)
  if (dbg=d_vb) print i," msg ",message(i), dictionary_index(message(i))
  msg$= dictionary$(dictionary_index(message(i)))
  print#1 msg$
next i
close 1



